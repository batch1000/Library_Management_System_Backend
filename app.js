const express = require("express");
const cors = require("cors");

const app = express();

app.use(cors());
app.use(express.json());

app.use('/api/auth', require('./app/api/auth/auth.routes'));
app.use('/api/book', require('./app/api/book/book.routes'));

module.exports = app;


// const DocGia = require('./app/models/docgiaModel'); // ch·ªânh l·∫°i ƒë∆∞·ªùng d·∫´n n·∫øu kh√°c
// (async () => {
//     try {
//         const readers = await DocGia.find();

//         console.log(`üìå T·ªïng s·ªë ƒë·ªôc gi·∫£: ${readers.length}`);
//         readers.forEach((dg, i) => {
//             console.log(
//                 `${i + 1}. _id: ${dg._id} | H·ªç t√™n: ${dg.HoLot} ${dg.Ten}}`
//             );
//         });
//     } catch (err) {
//         console.error("‚ùå L·ªói:", err.message);
//     }
// })();

// const Sach = require('./app/models/sachModel');
// (async () => {
//     try {
//         const books = await Sach.find();

//         console.log(`üìå T·ªïng s·ªë s√°ch: ${books.length}`);
//         books.forEach((book, i) => {
//             console.log(`${i + 1}. _id: ${book._id} | T√™n s√°ch: ${book.TenSach}`);
//         });
//     } catch (err) {
//         console.error("‚ùå L·ªói:", err.message);
//     }
// })();

//----------------------Rating Book-------------------------
// const { addRatingBook } = require('./app/api/book/book.service');
// const readers = [
//     { username: "dungle94", id: "689f390b0ba6ed16dcf4764a" },
//     { username: "thupham99", id: "689f390b0ba6ed16dcf4764f" },
//     { username: "khoavu98", id: "689f390c0ba6ed16dcf47654" },
//     { username: "bichdo97", id: "689f390c0ba6ed16dcf47659" },
//     { username: "tamngo93", id: "689f390c0ba6ed16dcf4765e" },
// ];

// (async () => {
//     try {
//         const bookId = "687a99b7a9de141afc8ea580"; // s√°ch c·ªë ƒë·ªãnh

//         for (let reader of readers) {
//             const stars = Math.floor(Math.random() * 5) + 1; // random 1-5

//             const result = await addRatingBook(bookId, reader.id, stars);

//             if (result) {
//                 console.log(`‚úÖ ${reader.username} ƒë√£ ƒë√°nh gi√° th√†nh c√¥ng (${stars}‚≠ê)`);
//             } else {
//                 console.log(`‚ö†Ô∏è ${reader.username} ƒë√£ ƒë√°nh gi√° s√°ch n√†y tr∆∞·ªõc ƒë√≥!`);
//             }
//         }
//     } catch (err) {
//         console.error("‚ùå L·ªói khi ch·∫°y script:", err.message);
//     }
// })();


//----------------------View Book-------------------------
// const TheoDoiXemSach = require('./app/models/theodoixemsachModel');
// // H√†m ghi nh·∫≠n l∆∞·ª£t xem
// async function addBookView(bookId, readerId) {
//   if (!bookId || !readerId) {
//     throw new Error("Thi·∫øu th√¥ng tin s√°ch ho·∫∑c ƒë·ªôc gi·∫£ ƒë·ªÉ ghi nh·∫≠n l∆∞·ª£t xem.");
//   }

//   // T·∫°o m·ªôt record m·ªõi cho l∆∞·ª£t xem
//   const newView = new TheoDoiXemSach({
//     MaSach: bookId,
//     MaDocGia: readerId
//   });

//   const savedView = await newView.save();
//   return savedView;
// }

// (async () => {
//   try {
//     const bookId = "687a99b7a9de141afc8ea580";   // ID s√°ch c·ªë ƒë·ªãnh
//     const readerId = "689f390b0ba6ed16dcf4764a"; // M·ªôt ƒë·ªôc gi·∫£ c·ª• th·ªÉ

//     const result = await addBookView(bookId, readerId);

//     console.log(`‚úÖ ƒê√£ ghi nh·∫≠n l∆∞·ª£t xem cho ƒë·ªôc gi·∫£ ${readerId} v·ªõi s√°ch ${bookId}`);
//     console.log(result); // In ra document v·ª´a l∆∞u
//   } catch (err) {
//     console.error("‚ùå L·ªói khi ch·∫°y script:", err.message);
//   }
// })();


//----------------------Borrow Book-------------------------
// const TheoDoiMuonSach = require('./app/models/theodoimuonsachModel');
// async function lendBook(data) {
//     try {
//         const { MaSach, MaDocGia, SoLuongMuon, Msnv } = data;

//         const ngayMuon = new Date();
//         const ngayTra = new Date();
//         ngayTra.setDate(ngayMuon.getDate() + 7); // cho m∆∞·ª£n 1 tu·∫ßn

//         const record = new TheoDoiMuonSach({
//             MaSach,
//             MaDocGia,
//             SoLuong: SoLuongMuon,
//             TrangThai: 'approved',
//             Msnv,
//             NgayMuon: ngayMuon,
//             NgayTra: ngayTra
//         });

//         const savedRecord = await record.save();
//         return savedRecord;

//     } catch (err) {
//         console.error('L·ªói khi m∆∞·ª£n s√°ch:', err);
//         throw err;
//     }
// }

// // Test m∆∞·ª£n s√°ch
// (async () => {
//     try {
//         const bookId = "687a99b7a9de141afc8ea580";   // ID s√°ch th·∫≠t
//         const readerId = "689f390b0ba6ed16dcf4764a"; // M·ªôt ƒë·ªôc gi·∫£ th·∫≠t
//         const staffId = "6877b60c14b0cc1b10278e45";  // Nh√¢n vi√™n ƒë√£ cho s·∫µn

//         const result = await lendBook({
//             MaSach: bookId,
//             MaDocGia: readerId,
//             SoLuongMuon: 1,
//             Msnv: staffId
//         });

//         console.log(`‚úÖ ƒê·ªôc gi·∫£ ${readerId} ƒë√£ m∆∞·ª£n s√°ch ${bookId}`);
//         console.log(result); // In ra document v·ª´a l∆∞u

//     } catch (err) {
//         console.error("‚ùå L·ªói khi ch·∫°y script:", err.message);
//     }
// })();





//----------------------Rating Book 2 Weeks-------------------------
// const DanhGiaSach = require('./app/models/danhgiasachModel');
// const readers = [
//     { username: "thanhTran", id: "687113ca8d3f5218287b7651" },
//     { username: "hoangTran", id: "68951fb83475df14e828916e" },
//     { username: "hainguyen", id: "689f296763a64118d8c26bcc" },
//     { username: "lanNguyen", id: "689f38b3fb95ec1614eba15d" },
//     { username: "namPham", id: "689f38b3fb95ec1614eba162" },
//     { username: "anhLe", id: "689f38b3fb95ec1614eba167" },
//     { username: "hongVo", id: "689f38b3fb95ec1614eba16c" },
//     { username: "phucNguyen", id: "689f390b0ba6ed16dcf4763f" },
//     { username: "maiTran", id: "689f390b0ba6ed16dcf47645" },
//     { username: "dungLe", id: "689f390b0ba6ed16dcf4764a" },
//     { username: "thuPham", id: "689f390b0ba6ed16dcf4764f" },
//     { username: "khoaVu", id: "689f390c0ba6ed16dcf47654" },
//     { username: "bichDo", id: "689f390c0ba6ed16dcf47659" },
//     { username: "tamNgo", id: "689f390c0ba6ed16dcf4765e" },
//     { username: "yenHuynh", id: "689f390c0ba6ed16dcf47663" },
//     { username: "huyBui", id: "689f390c0ba6ed16dcf47668" },
//     { username: "hoaDang", id: "689f390d0ba6ed16dcf4766d" },
//     { username: "lamTruong", id: "689f394afc24c01b60e1cc9f" },
//     { username: "hanhNguyen", id: "689f394afc24c01b60e1cca4" },
//     { username: "quangPhan", id: "689f394bfc24c01b60e1cca9" },
// ];

// const books = [
//     { title: "The Secret Deep", id: "687a67faa9de141afc8ea572" },
//     { title: "Gi·∫øt con chim nh·∫°i", id: "687a9762a9de141afc8ea579" },
//     { title: "M·∫Øt Bi·∫øc", id: "687a99b7a9de141afc8ea580" },
//     { title: "The Martian", id: "687a9a9ea9de141afc8ea587" },
//     { title: "The Hobbit", id: "687a9b0fa9de141afc8ea58e" },
//     { title: "1984", id: "687aa878a9de141afc8ea595" },
//     { title: "Tu·ªïi th∆° d·ªØ d·ªôi", id: "687aa8eaa9de141afc8ea59c" },
//     { title: "Ng·ªìi Kh√≥c Tr√™n C√¢y", id: "687aa9b0a9de141afc8ea5a0" },
//     { title: "The Shining", id: "687aab5fa9de141afc8ea5a7" },
//     { title: "D·∫ø M√®n phi√™u l∆∞u k√Ω", id: "687aac4da9de141afc8ea5ab" },
//     { title: "Becoming", id: "687aaf03a9de141afc8ea5af" },
//     { title: "T√¥i th·∫•y hoa v√†ng tr√™n c·ªè xanh", id: "687ab02ca9de141afc8ea5b3" },
//     { title: "The Da Vinci Code", id: "687ab0c9a9de141afc8ea5b7" },
//     { title: "Pride and Prejudice", id: "687ab1bea9de141afc8ea5be" },
//     { title: "S·ªëng M√≤n", id: "687ab383a9de141afc8ea5c5" },
//     { title: "Atomic Habits", id: "687b8566c290a2086476f28f" },
//     { title: "ƒê·∫Øc Nh√¢n T√¢m", id: "687ba752c290a2086476f301" },
//     { title: "Norwegian Wood", id: "687ba60ac290a2086476f2fa" },
//     { title: "Deep Work", id: "687b7a30c290a2086476f281" },
//     { title: "Dune", id: "687b908fc290a2086476f2d1" },
// ];

// async function createRating(bookId, readerId, stars, customDate) {
//     const existingRating = await DanhGiaSach.findOne({
//         MaSach: bookId,
//         MaDocGia: readerId
//     });

//     if (existingRating) {
//         return null;
//     }

//     const newRating = new DanhGiaSach({
//         MaSach: bookId,
//         MaDocGia: readerId,
//         SoSao: stars,
//         BinhLuan: "",
//         NgayDanhGia: customDate,
//         createdAt: customDate,
//         updatedAt: customDate
//     });

//     return await newRating.save();
// }

// function getRandomBook() {
//     const popularBooks = books.slice(0, 8);
//     const otherBooks = books.slice(8);

//     if (Math.random() < 0.7) {
//         return popularBooks[Math.floor(Math.random() * popularBooks.length)];
//     } else {
//         return otherBooks[Math.floor(Math.random() * otherBooks.length)];
//     }
// }

// function getRandomRating() {
//     const rand = Math.random();
//     if (rand < 0.4) return 5;
//     if (rand < 0.7) return 4;
//     if (rand < 0.85) return 3;
//     if (rand < 0.95) return 2;
//     return 1;
// }

// function getRandomDateInLast14Days() {
//     const now = new Date();
//     let adjustedDaysAgo;
//     const rand = Math.random();

//     if (rand < 0.4) {
//         adjustedDaysAgo = Math.floor(Math.random() * 3);
//     } else if (rand < 0.7) {
//         adjustedDaysAgo = Math.floor(Math.random() * 4) + 3;
//     } else {
//         adjustedDaysAgo = Math.floor(Math.random() * 7) + 7;
//     }

//     const targetDate = new Date(now);
//     targetDate.setDate(now.getDate() - adjustedDaysAgo);

//     const randomHour = Math.floor(Math.random() * 14) + 8;
//     const randomMinute = Math.floor(Math.random() * 60);

//     targetDate.setHours(randomHour, randomMinute, 0, 0);
//     return targetDate;
// }

// (async () => {
//     try {
//         console.log("B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu ƒë√°nh gi√° s√°ch...\n");

//         let successCount = 0;
//         let duplicateCount = 0;

//         const totalRatings = Math.floor(Math.random() * 41) + 80;

//         for (let i = 0; i < totalRatings; i++) {
//             const randomReader = readers[Math.floor(Math.random() * readers.length)];
//             const randomBook = getRandomBook();
//             const stars = getRandomRating();
//             const randomDate = getRandomDateInLast14Days();

//             const result = await createRating(randomBook.id, randomReader.id, stars, randomDate);

//             if (result) {
//                 successCount++;
//                 const daysAgo = Math.floor((new Date() - randomDate) / (1000 * 60 * 60 * 24));
//                 console.log(`${randomReader.username} ƒë√£ ƒë√°nh gi√° "${randomBook.title}" (${stars} sao) - ${daysAgo} ng√†y tr∆∞·ªõc`);
//             } else {
//                 duplicateCount++;
//                 console.log(`${randomReader.username} ƒë√£ ƒë√°nh gi√° "${randomBook.title}" tr∆∞·ªõc ƒë√≥`);
//             }

//             await new Promise(resolve => setTimeout(resolve, 100));
//         }

//         console.log(`\nK·∫øt qu·∫£:`);
//         console.log(`ƒê√°nh gi√° th√†nh c√¥ng: ${successCount}`);
//         console.log(`ƒê√°nh gi√° tr√πng l·∫∑p: ${duplicateCount}`);
//         console.log(`T·ªïng: ${successCount + duplicateCount} l·∫ßn th·ª≠`);

//         console.log(`\nPh√¢n ph·ªëi d·ªØ li·ªáu:`);
//         console.log(`40% d·ªØ li·ªáu: 3 ng√†y g·∫ßn nh·∫•t`);
//         console.log(`30% d·ªØ li·ªáu: 4-7 ng√†y tr∆∞·ªõc`);
//         console.log(`30% d·ªØ li·ªáu: 8-14 ng√†y tr∆∞·ªõc`);
//     } catch (err) {
//         console.error("L·ªói khi ch·∫°y script:", err.message);
//     }
// })();




//----------------------Delete All Ratings-------------------------
// const DanhGiaSach = require('./app/models/danhgiasachModel');

// async function deleteAllRatings() {
//     try {
//         const result = await DanhGiaSach.deleteMany({}); // x√≥a h·∫øt
//         console.log(`üóëÔ∏è ƒê√£ x√≥a ${result.deletedCount} ƒë√°nh gi√° trong h·ªá th·ªëng.`);
//     } catch (err) {
//         console.error("‚ùå L·ªói khi x√≥a ƒë√°nh gi√°:", err.message);
//     }
// }

// // // Ch·∫°y function
// (async () => {
//     await deleteAllRatings();
// })();



// //----------------------View Book-------------------------
// const TheoDoiXemSach = require('./app/models/theodoixemsachModel');

// // H√†m t·∫°o l∆∞·ª£t xem tr·ª±c ti·∫øp v√†o database
// async function createBookView(bookId, readerId, customDate) {
//     const newView = new TheoDoiXemSach({
//         MaSach: bookId,
//         MaDocGia: readerId,
//         ThoiDiemXem: customDate
//     });

//     const savedView = await newView.save();
//     return savedView;
// }

// const readers = [
//     { username: "thanhTran", id: "687113ca8d3f5218287b7651" },
//     { username: "hoangTran", id: "68951fb83475df14e828916e" },
//     { username: "hainguyen", id: "689f296763a64118d8c26bcc" },
//     { username: "lanNguyen", id: "689f38b3fb95ec1614eba15d" },
//     { username: "namPham", id: "689f38b3fb95ec1614eba162" },
//     { username: "anhLe", id: "689f38b3fb95ec1614eba167" },
//     { username: "hongVo", id: "689f38b3fb95ec1614eba16c" },
//     { username: "phucNguyen", id: "689f390b0ba6ed16dcf4763f" },
//     { username: "maiTran", id: "689f390b0ba6ed16dcf47645" },
//     { username: "dungLe", id: "689f390b0ba6ed16dcf4764a" },
//     { username: "thuPham", id: "689f390b0ba6ed16dcf4764f" },
//     { username: "khoaVu", id: "689f390c0ba6ed16dcf47654" },
//     { username: "bichDo", id: "689f390c0ba6ed16dcf47659" },
//     { username: "tamNgo", id: "689f390c0ba6ed16dcf4765e" },
//     { username: "yenHuynh", id: "689f390c0ba6ed16dcf47663" },
//     { username: "huyBui", id: "689f390c0ba6ed16dcf47668" },
//     { username: "hoaDang", id: "689f390d0ba6ed16dcf4766d" },
//     { username: "lamTruong", id: "689f394afc24c01b60e1cc9f" },
//     { username: "hanhNguyen", id: "689f394afc24c01b60e1cca4" },
//     { username: "quangPhan", id: "689f394bfc24c01b60e1cca9" },
//     { username: "thuyDinh", id: "689f394bfc24c01b60e1ccae" },
//     { username: "phucVu", id: "689f394bfc24c01b60e1ccb3" },
//     { username: "huongLy", id: "689f394bfc24c01b60e1ccb8" },
//     { username: "datNguyen", id: "689f394bfc24c01b60e1ccbd" },
//     { username: "trangBui", id: "689f394cfc24c01b60e1ccc2" },
// ];

// const books = [
//     { title: "The Secret Deep", id: "687a67faa9de141afc8ea572" },
//     { title: "Gi·∫øt con chim nh·∫°i", id: "687a9762a9de141afc8ea579" },
//     { title: "M·∫Øt Bi·∫øc", id: "687a99b7a9de141afc8ea580" },
//     { title: "The Martian", id: "687a9a9ea9de141afc8ea587" },
//     { title: "The Hobbit", id: "687a9b0fa9de141afc8ea58e" },
//     { title: "1984", id: "687aa878a9de141afc8ea595" },
//     { title: "Tu·ªïi th∆° d·ªØ d·ªôi", id: "687aa8eaa9de141afc8ea59c" },
//     { title: "Ng·ªìi Kh√≥c Tr√™n C√¢y", id: "687aa9b0a9de141afc8ea5a0" },
//     { title: "The Shining", id: "687aab5fa9de141afc8ea5a7" },
//     { title: "D·∫ø M√®n phi√™u l∆∞u k√Ω", id: "687aac4da9de141afc8ea5ab" },
//     { title: "Becoming", id: "687aaf03a9de141afc8ea5af" },
//     { title: "T√¥i th·∫•y hoa v√†ng tr√™n c·ªè xanh", id: "687ab02ca9de141afc8ea5b3" },
//     { title: "The Da Vinci Code", id: "687ab0c9a9de141afc8ea5b7" },
//     { title: "Pride and Prejudice", id: "687ab1bea9de141afc8ea5be" },
//     { title: "S·ªëng M√≤n", id: "687ab383a9de141afc8ea5c5" },
//     { title: "Man's Search for Meaning", id: "687ab5d0a9de141afc8ea5cc" },
//     { title: "A Brief History of Time", id: "687ab6d4a9de141afc8ea5d3" },
//     { title: "The Book Thief", id: "687ab95ba9de141afc8ea5da" },
//     { title: "Atomic Habits", id: "687b8566c290a2086476f28f" },
//     { title: "Deep Work", id: "687b7a30c290a2086476f281" },
//     { title: "ƒê·∫Øc Nh√¢n T√¢m", id: "687ba752c290a2086476f301" },
//     { title: "Norwegian Wood", id: "687ba60ac290a2086476f2fa" },
//     { title: "Dune", id: "687b908fc290a2086476f2d1" },
//     { title: "The Name of the Wind", id: "687b9143c290a2086476f2d8" },
//     { title: "Hi·ªÉu v·ªÅ tr√°i tim", id: "687ba4a2c290a2086476f2f6" },
// ];

// // H√†m ch·ªçn s√°ch theo tr·ªçng s·ªë (m·ªôt s·ªë s√°ch "hot" h∆°n)
// function getRandomBook() {
//     const hotBooks = books.slice(0, 10); // 10 s√°ch hot nh·∫•t
//     const normalBooks = books.slice(10, 18); // 8 s√°ch b√¨nh th∆∞·ªùng
//     const lessPopular = books.slice(18); // S√°ch √≠t ph·ªï bi·∫øn h∆°n

//     const rand = Math.random();
//     if (rand < 0.5) { // 50% - s√°ch hot
//         return hotBooks[Math.floor(Math.random() * hotBooks.length)];
//     } else if (rand < 0.8) { // 30% - s√°ch b√¨nh th∆∞·ªùng  
//         return normalBooks[Math.floor(Math.random() * normalBooks.length)];
//     } else { // 20% - s√°ch √≠t ph·ªï bi·∫øn
//         return lessPopular[Math.floor(Math.random() * lessPopular.length)];
//     }
// }

// // H√†m m√¥ ph·ªèng h√†nh vi xem th·ª±c t·∫ø (m·ªôt s·ªë ƒë·ªôc gi·∫£ active h∆°n)
// function getRandomReader() {
//     const activeReaders = readers.slice(0, 12); // 12 ƒë·ªôc gi·∫£ active
//     const normalReaders = readers.slice(12);    // 13 ƒë·ªôc gi·∫£ b√¨nh th∆∞·ªùng

//     // 65% c∆° h·ªôi ch·ªçn ƒë·ªôc gi·∫£ active, 35% ƒë·ªôc gi·∫£ b√¨nh th∆∞·ªùng
//     if (Math.random() < 0.65) {
//         return activeReaders[Math.floor(Math.random() * activeReaders.length)];
//     } else {
//         return normalReaders[Math.floor(Math.random() * normalReaders.length)];
//     }
// }

// // H√†m t·∫°o ng√†y xem ph√¢n b·ªë ƒë·ªÅu trong 2 tu·∫ßn
// function generateDistributedViewDates(targetCount) {
//     const now = new Date();
//     const twoWeeksAgo = new Date();
//     twoWeeksAgo.setDate(now.getDate() - 14);
    
//     const dates = [];
//     const totalDays = 14;
    
//     // Ph√¢n b·ªë theo th·ªùi gian th·ª±c t·∫ø: ng√†y g·∫ßn ƒë√¢y nhi·ªÅu h∆°n
//     const dayWeights = [];
//     for (let day = 0; day < totalDays; day++) {
//         // Ng√†y c√†ng g·∫ßn hi·ªán t·∫°i th√¨ weight c√†ng cao
//         const weight = Math.max(0.3, 1 - (day * 0.05)); // Gi·∫£m d·∫ßn t·ª´ 1.0 xu·ªëng 0.3
//         dayWeights.push(weight);
//     }
    
//     // ƒêi·ªÅu ch·ªânh theo ng√†y trong tu·∫ßn
//     const adjustWeightByDayOfWeek = (date, weight) => {
//         const dayOfWeek = date.getDay();
//         const weekdayMultiplier = {
//             0: 0.7,  // Ch·ªß nh·∫≠t - √≠t h∆°n
//             1: 1.1,  // Th·ª© 2 - nhi·ªÅu 
//             2: 1.2,  // Th·ª© 3 - nhi·ªÅu
//             3: 1.3,  // Th·ª© 4 - nhi·ªÅu nh·∫•t
//             4: 1.2,  // Th·ª© 5 - nhi·ªÅu
//             5: 1.1,  // Th·ª© 6 - nhi·ªÅu
//             6: 0.8   // Th·ª© 7 - √≠t h∆°n
//         };
//         return weight * weekdayMultiplier[dayOfWeek];
//     };
    
//     // T·∫°o ph√¢n b·ªë cho t·ª´ng ng√†y
//     for (let day = 0; day < totalDays; day++) {
//         const currentDate = new Date(now);
//         currentDate.setDate(now.getDate() - (totalDays - 1 - day)); // ƒê·∫£o ng∆∞·ª£c ƒë·ªÉ ng√†y g·∫ßn nh·∫•t c√≥ index cao
        
//         let weight = dayWeights[day];
//         weight = adjustWeightByDayOfWeek(currentDate, weight);
        
//         // T√≠nh s·ªë l∆∞·ª£ng cho ng√†y n√†y
//         const baseCount = Math.floor(targetCount / totalDays * weight);
//         const randomVariation = Math.floor(Math.random() * 4) - 1; // -1 ƒë·∫øn 2
//         const dayCount = Math.max(1, baseCount + randomVariation);
        
//         // T·∫°o c√°c th·ªùi ƒëi·ªÉm trong ng√†y v·ªõi ph√¢n b·ªë th·ª±c t·∫ø
//         for (let i = 0; i < dayCount; i++) {
//             const viewDate = new Date(currentDate);
            
//             // Ph√¢n b·ªë gi·ªù trong ng√†y theo th√≥i quen th·ª±c t·∫ø
//             let hour;
//             const hourRand = Math.random();
//             if (hourRand < 0.15) { // 15% - s√°ng s·ªõm (7-9h)
//                 hour = 7 + Math.floor(Math.random() * 2);
//             } else if (hourRand < 0.35) { // 20% - bu·ªïi s√°ng (9-12h)
//                 hour = 9 + Math.floor(Math.random() * 3);
//             } else if (hourRand < 0.45) { // 10% - bu·ªïi tr∆∞a (12-14h)
//                 hour = 12 + Math.floor(Math.random() * 2);
//             } else if (hourRand < 0.7) { // 25% - bu·ªïi chi·ªÅu (14-18h)
//                 hour = 14 + Math.floor(Math.random() * 4);
//             } else { // 30% - bu·ªïi t·ªëi (18-22h)
//                 hour = 18 + Math.floor(Math.random() * 4);
//             }
            
//             const minute = Math.floor(Math.random() * 60);
//             viewDate.setHours(hour, minute, 0, 0);
//             dates.push(viewDate);
//         }
//     }
    
//     // Tr·ªôn ng·∫´u nhi√™n ƒë·ªÉ tr√°nh pattern
//     for (let i = dates.length - 1; i > 0; i--) {
//         const j = Math.floor(Math.random() * (i + 1));
//         [dates[i], dates[j]] = [dates[j], dates[i]];
//     }
    
//     return dates.slice(0, targetCount);
// }

// // H√†m t·∫°o combinations v·ªõi kh·∫£ nƒÉng duplicate (v√¨ ng∆∞·ªùi d√πng c√≥ th·ªÉ xem s√°ch nhi·ªÅu l·∫ßn)
// function generateViewCombinations(targetCount) {
//     const combinations = [];
    
//     for (let i = 0; i < targetCount; i++) {
//         const reader = getRandomReader();
//         const book = getRandomBook();
        
//         combinations.push({
//             reader,
//             book
//         });
//     }
    
//     return combinations;
// }

// (async () => {
//     try {
//         console.log("Bat dau tao du lieu luot xem sach phan bo deu trong 2 tuan...\n");

//         const targetViewCount = 500; // TƒÉng l√™n 500 l∆∞·ª£t xem (nhi·ªÅu h∆°n m∆∞·ª£n s√°ch)
//         let successCount = 0;
//         let errorCount = 0;

//         // T·∫°o combinations
//         console.log("Dang tao combinations xem sach...");
//         const combinations = generateViewCombinations(targetViewCount);
//         console.log(`Da tao ${combinations.length} combinations\n`);

//         // T·∫°o ng√†y xem ph√¢n b·ªë ƒë·ªÅu
//         console.log("Dang tao phan bo ngay xem...");
//         const viewDates = generateDistributedViewDates(targetViewCount);
//         console.log(`Da tao ${viewDates.length} ngay xem phan bo deu\n`);

//         // Th·ª±c hi·ªán t·∫°o d·ªØ li·ªáu
//         for (let i = 0; i < Math.min(combinations.length, viewDates.length); i++) {
//             try {
//                 const combo = combinations[i];
//                 const viewDate = viewDates[i];

//                 const result = await createBookView(combo.book.id, combo.reader.id, viewDate);

//                 if (result) {
//                     successCount++;
//                     const daysAgo = Math.floor((new Date() - viewDate) / (1000 * 60 * 60 * 24));
//                     const timeStr = viewDate.toLocaleTimeString('vi-VN', { 
//                         hour: '2-digit', 
//                         minute: '2-digit' 
//                     });
//                     console.log(`[${successCount}] ${combo.reader.username} xem "${combo.book.title}" - ${daysAgo} ngay truoc luc ${timeStr}`);
//                 }

//                 // Delay ƒë·ªÉ tr√°nh spam database
//                 if (i % 20 === 0) {
//                     await new Promise(resolve => setTimeout(resolve, 30));
//                 }

//             } catch (error) {
//                 errorCount++;
//                 if (errorCount <= 5) { // Ch·ªâ log 5 l·ªói ƒë·∫ßu ti√™n
//                     console.log(`Loi khi tao luot xem: ${error.message}`);
//                 }
//             }

//             // Progress indicator m·ªói 50 l∆∞·ª£t
//             if ((i + 1) % 50 === 0) {
//                 console.log(`--- Da xu ly ${i + 1}/${targetViewCount} luot ---`);
//             }
//         }

//         // Th·ªëng k√™ k·∫øt qu·∫£
//         console.log(`\n${'='.repeat(50)}`);
//         console.log(`KET QUA TAO DU LIEU LUOT XEM SACH`);
//         console.log(`${'='.repeat(50)}`);
//         console.log(`Thanh cong: ${successCount} luot xem`);
//         console.log(`Loi: ${errorCount} luot`);
//         console.log(`Tong cong: ${successCount + errorCount} lan thu`);

//         // Th·ªëng k√™ chi ti·∫øt
//         console.log(`\n${'='.repeat(50)}`);
//         console.log(`THONG KE CHI TIET`);
//         console.log(`${'='.repeat(50)}`);
//         console.log(`Ti le thanh cong: ${((successCount / (successCount + errorCount)) * 100).toFixed(1)}%`);
//         console.log(`Trung binh moi sach: ~${(successCount / books.length).toFixed(1)} luot xem`);
//         console.log(`Trung binh moi doc gia: ~${(successCount / readers.length).toFixed(1)} luot xem`);

//         // Ph√¢n t√≠ch ph√¢n b·ªë th·ªùi gian
//         console.log(`\nPHAN BO THOI GIAN:`);
//         console.log(`Du lieu duoc phan bo trong 14 ngay qua`);
//         console.log(`Ngay gan day nhieu luot xem hon ngay cu`);
//         console.log(`Gio cao diem: 14h-18h (25%) va 18h-22h (30%)`);
//         console.log(`Thu 4 co nhieu luot xem nhat, chu nhat it nhat`);

//         // Ph√¢n t√≠ch h√†nh vi
//         console.log(`\nPHAN TICH HANH VI:`);
//         console.log(`65% luot xem tu doc gia tich cuc`);
//         console.log(`50% luot xem tap trung vao sach hot`);
//         console.log(`Cho phep xem sach nhieu lan (khong check duplicate)`);

//     } catch (err) {
//         console.error("Loi chung khi chay script:", err.message);
//     }
// })();


// //----------------------Borrow Book with Duplicate Check-------------------------
// const TheoDoiMuonSach = require('./app/models/theodoimuonsachModel');

// async function lendBook(data) {
//     try {
//         const { MaSach, MaDocGia, SoLuongMuon, Msnv, NgayMuonCustom } = data;

//         // Ki·ªÉm tra xem ƒë·ªôc gi·∫£ n√†y c√≥ ƒëang m∆∞·ª£n s√°ch n√†y ch∆∞a
//         const existingBorrow = await TheoDoiMuonSach.findOne({
//             MaSach: MaSach,
//             MaDocGia: MaDocGia,
//             TrangThai: 'approved' // Ch·ªâ check nh·ªØng s√°ch ƒëang ƒë∆∞·ª£c m∆∞·ª£n
//         });

//         if (existingBorrow) {
//             throw new Error(`ƒê·ªôc gi·∫£ ƒëang m∆∞·ª£n s√°ch n√†y r·ªìi`);
//         }

//         // S·ª≠ d·ª•ng ng√†y m∆∞·ª£n t√πy ch·ªânh n·∫øu c√≥, kh√¥ng th√¨ random nh∆∞ c≈©
//         let ngayMuon;
//         if (NgayMuonCustom) {
//             ngayMuon = NgayMuonCustom;
//         } else {
//             // Random ng√†y m∆∞·ª£n trong v√≤ng 2 tu·∫ßn tr·ªü l·∫°i ƒë√¢y
//             const now = new Date();
//             const twoWeeksAgo = new Date();
//             twoWeeksAgo.setDate(now.getDate() - 14);

//             const randomTime = twoWeeksAgo.getTime() + Math.random() * (now.getTime() - twoWeeksAgo.getTime());
//             ngayMuon = new Date(randomTime);
//         }

//         const ngayTra = new Date(ngayMuon);
//         ngayTra.setDate(ngayMuon.getDate() + 7); // cho m∆∞·ª£n 1 tu·∫ßn

//         const record = new TheoDoiMuonSach({
//             MaSach,
//             MaDocGia,
//             SoLuong: SoLuongMuon,
//             TrangThai: 'approved',
//             Msnv,
//             NgayMuon: ngayMuon,
//             NgayTra: ngayTra,
//             DaGiaHan: false
//         });

//         const savedRecord = await record.save();
//         return savedRecord;

//     } catch (err) {
//         console.error('L·ªói khi m∆∞·ª£n s√°ch:', err.message);
//         throw err;
//     }
// }

// const readers = [
//     { username: "thanhTran", id: "687113ca8d3f5218287b7651" },
//     { username: "hoangTran", id: "68951fb83475df14e828916e" },
//     { username: "hainguyen", id: "689f296763a64118d8c26bcc" },
//     { username: "lanNguyen", id: "689f38b3fb95ec1614eba15d" },
//     { username: "namPham", id: "689f38b3fb95ec1614eba162" },
//     { username: "anhLe", id: "689f38b3fb95ec1614eba167" },
//     { username: "hongVo", id: "689f38b3fb95ec1614eba16c" },
//     { username: "phucNguyen", id: "689f390b0ba6ed16dcf4763f" },
//     { username: "maiTran", id: "689f390b0ba6ed16dcf47645" },
//     { username: "dungLe", id: "689f390b0ba6ed16dcf4764a" },
//     { username: "thuPham", id: "689f390b0ba6ed16dcf4764f" },
//     { username: "khoaVu", id: "689f390c0ba6ed16dcf47654" },
//     { username: "bichDo", id: "689f390c0ba6ed16dcf47659" },
//     { username: "tamNgo", id: "689f390c0ba6ed16dcf4765e" },
//     { username: "yenHuynh", id: "689f390c0ba6ed16dcf47663" },
//     { username: "huyBui", id: "689f390c0ba6ed16dcf47668" },
//     { username: "hoaDang", id: "689f390d0ba6ed16dcf4766d" },
//     { username: "lamTruong", id: "689f394afc24c01b60e1cc9f" },
//     { username: "hanhNguyen", id: "689f394afc24c01b60e1cca4" },
//     { username: "quangPhan", id: "689f394bfc24c01b60e1cca9" },
//     { username: "thuyDinh", id: "689f394bfc24c01b60e1ccae" },
//     { username: "phucVu", id: "689f394bfc24c01b60e1ccb3" },
//     { username: "huongLy", id: "689f394bfc24c01b60e1ccb8" },
//     { username: "datNguyen", id: "689f394bfc24c01b60e1ccbd" },
//     { username: "trangBui", id: "689f394cfc24c01b60e1ccc2" },
//     { username: "sonHoang", id: "689f394cfc24c01b60e1ccc7" },
//     { username: "ngocDoan", id: "689f394cfc24c01b60e1cccc" },
// ];

// const books = [
//     { title: "The Secret Deep", id: "687a67faa9de141afc8ea572" },
//     { title: "Gi·∫øt con chim nh·∫°i", id: "687a9762a9de141afc8ea579" },
//     { title: "M·∫Øt Bi·∫øc", id: "687a99b7a9de141afc8ea580" },
//     { title: "The Martian", id: "687a9a9ea9de141afc8ea587" },
//     { title: "The Hobbit", id: "687a9b0fa9de141afc8ea58e" },
//     { title: "1984", id: "687aa878a9de141afc8ea595" },
//     { title: "Tu·ªïi th∆° d·ªØ d·ªôi", id: "687aa8eaa9de141afc8ea59c" },
//     { title: "Ng·ªìi Kh√≥c Tr√™n C√¢y", id: "687aa9b0a9de141afc8ea5a0" },
//     { title: "The Shining", id: "687aab5fa9de141afc8ea5a7" },
//     { title: "D·∫ø M√®n phi√™u l∆∞u k√Ω", id: "687aac4da9de141afc8ea5ab" },
//     { title: "Becoming", id: "687aaf03a9de141afc8ea5af" },
//     { title: "T√¥i th·∫•y hoa v√†ng tr√™n c·ªè xanh", id: "687ab02ca9de141afc8ea5b3" },
//     { title: "The Da Vinci Code", id: "687ab0c9a9de141afc8ea5b7" },
//     { title: "Pride and Prejudice", id: "687ab1bea9de141afc8ea5be" },
//     { title: "S·ªëng M√≤n", id: "687ab383a9de141afc8ea5c5" },
//     { title: "Man's Search for Meaning", id: "687ab5d0a9de141afc8ea5cc" },
//     { title: "A Brief History of Time", id: "687ab6d4a9de141afc8ea5d3" },
//     { title: "The Book Thief", id: "687ab95ba9de141afc8ea5da" },
//     { title: "Atomic Habits", id: "687b8566c290a2086476f28f" },
//     { title: "Deep Work", id: "687b7a30c290a2086476f281" },
//     { title: "ƒê·∫Øc Nh√¢n T√¢m", id: "687ba752c290a2086476f301" },
//     { title: "Norwegian Wood", id: "687ba60ac290a2086476f2fa" },
//     { title: "Dune", id: "687b908fc290a2086476f2d1" },
//     { title: "The Name of the Wind", id: "687b9143c290a2086476f2d8" },
// ];

// // H√†m ch·ªçn s√°ch theo ƒë·ªô ph·ªï bi·∫øn cho vi·ªác m∆∞·ª£n
// function getRandomBookForBorrow() {
//     const popularBooks = books.slice(0, 8);   // S√°ch ph·ªï bi·∫øn, d·ªÖ m∆∞·ª£n
//     const mediumBooks = books.slice(8, 16);   // S√°ch trung b√¨nh
//     const lessPopular = books.slice(16);      // S√°ch √≠t ƒë∆∞·ª£c m∆∞·ª£n

//     const rand = Math.random();
//     if (rand < 0.6) { // 60% - s√°ch ph·ªï bi·∫øn
//         return popularBooks[Math.floor(Math.random() * popularBooks.length)];
//     } else if (rand < 0.85) { // 25% - s√°ch trung b√¨nh
//         return mediumBooks[Math.floor(Math.random() * mediumBooks.length)];
//     } else { // 15% - s√°ch √≠t ph·ªï bi·∫øn
//         return lessPopular[Math.floor(Math.random() * lessPopular.length)];
//     }
// }

// // H√†m ch·ªçn ƒë·ªôc gi·∫£ theo th√≥i quen m∆∞·ª£n s√°ch
// function getRandomReaderForBorrow() {
//     const frequentReaders = readers.slice(0, 10); // 10 ƒë·ªôc gi·∫£ m∆∞·ª£n nhi·ªÅu
//     const normalReaders = readers.slice(10, 20);  // 10 ƒë·ªôc gi·∫£ b√¨nh th∆∞·ªùng  
//     const occasionalReaders = readers.slice(20);  // 7 ƒë·ªôc gi·∫£ th·ªânh tho·∫£ng m∆∞·ª£n

//     const rand = Math.random();
//     if (rand < 0.5) { // 50% - ƒë·ªôc gi·∫£ m∆∞·ª£n th∆∞·ªùng xuy√™n
//         return frequentReaders[Math.floor(Math.random() * frequentReaders.length)];
//     } else if (rand < 0.8) { // 30% - ƒë·ªôc gi·∫£ b√¨nh th∆∞·ªùng
//         return normalReaders[Math.floor(Math.random() * normalReaders.length)];
//     } else { // 20% - ƒë·ªôc gi·∫£ th·ªânh tho·∫£ng
//         return occasionalReaders[Math.floor(Math.random() * occasionalReaders.length)];
//     }
// }

// // H√†m random s·ªë l∆∞·ª£ng m∆∞·ª£n th·ª±c t·∫ø
// function getRandomBorrowQuantity() {
//     const rand = Math.random();
//     if (rand < 0.75) return 1; // 75% m∆∞·ª£n 1 cu·ªën
//     if (rand < 0.95) return 2; // 20% m∆∞·ª£n 2 cu·ªën  
//     return 3; // 5% m∆∞·ª£n 3 cu·ªën
// }

// // H√†m t·∫°o ng√†y m∆∞·ª£n ph√¢n b·ªë ƒë·ªÅu trong 2 tu·∫ßn
// function generateDistributedBorrowDates(targetCount) {
//     const now = new Date();
//     const twoWeeksAgo = new Date();
//     twoWeeksAgo.setDate(now.getDate() - 14);
    
//     const dates = [];
//     const totalDays = 14;
    
//     // T·∫°o ph√¢n b·ªë theo c√°c ng√†y trong tu·∫ßn
//     // Th·ª© 2-6: nhi·ªÅu h∆°n, th·ª© 7-CN: √≠t h∆°n
//     const dayWeights = {
//         0: 0.8,  // Ch·ªß nh·∫≠t - √≠t
//         1: 1.2,  // Th·ª© 2 - nhi·ªÅu
//         2: 1.3,  // Th·ª© 3 - nhi·ªÅu  
//         3: 1.4,  // Th·ª© 4 - nhi·ªÅu nh·∫•t
//         4: 1.3,  // Th·ª© 5 - nhi·ªÅu
//         5: 1.2,  // Th·ª© 6 - nhi·ªÅu
//         6: 0.9   // Th·ª© 7 - √≠t
//     };
    
//     // T·∫°o ph√¢n b·ªë cho t·ª´ng ng√†y
//     for (let day = 0; day < totalDays; day++) {
//         const currentDate = new Date(twoWeeksAgo);
//         currentDate.setDate(twoWeeksAgo.getDate() + day);
        
//         const dayOfWeek = currentDate.getDay();
//         const weight = dayWeights[dayOfWeek];
        
//         // T√≠nh s·ªë l∆∞·ª£ng cho ng√†y n√†y (v·ªõi m·ªôt ch√∫t random)
//         const baseCount = Math.floor(targetCount / totalDays * weight);
//         const randomVariation = Math.floor(Math.random() * 3) - 1; // -1, 0, ho·∫∑c 1
//         const dayCount = Math.max(1, baseCount + randomVariation);
        
//         // T·∫°o c√°c th·ªùi ƒëi·ªÉm trong ng√†y (gi·ªù l√†m vi·ªác 8h-17h)
//         for (let i = 0; i < dayCount; i++) {
//             const borrowDate = new Date(currentDate);
            
//             // Random gi·ªù trong ng√†y l√†m vi·ªác (8h-17h)
//             const hour = 8 + Math.floor(Math.random() * 9);
//             const minute = Math.floor(Math.random() * 60);
            
//             borrowDate.setHours(hour, minute, 0, 0);
//             dates.push(borrowDate);
//         }
//     }
    
//     // Tr·ªôn ng·∫´u nhi√™n array ƒë·ªÉ tr√°nh pattern
//     for (let i = dates.length - 1; i > 0; i--) {
//         const j = Math.floor(Math.random() * (i + 1));
//         [dates[i], dates[j]] = [dates[j], dates[i]];
//     }
    
//     return dates.slice(0, targetCount);
// }

// // H√†m ki·ªÉm tra n·∫øu combination ƒë√£ exist
// async function checkExistingCombination(MaSach, MaDocGia) {
//     try {
//         const existing = await TheoDoiMuonSach.findOne({
//             MaSach: MaSach,
//             MaDocGia: MaDocGia,
//             TrangThai: 'approved'
//         });
//         return !!existing;
//     } catch (error) {
//         return false;
//     }
// }

// // H√†m t·∫°o combinations unique
// function generateUniqueCombinations(targetCount) {
//     const combinations = [];
//     const used = new Set();
    
//     let attempts = 0;
//     const maxAttempts = targetCount * 3; // ƒê·ªÉ ƒë·∫£m b·∫£o c√≥ ƒë·ªß combinations
    
//     while (combinations.length < targetCount && attempts < maxAttempts) {
//         const reader = getRandomReaderForBorrow();
//         const book = getRandomBookForBorrow();
//         const quantity = getRandomBorrowQuantity();
        
//         const key = `${book.id}-${reader.id}`;
        
//         if (!used.has(key)) {
//             used.add(key);
//             combinations.push({
//                 reader,
//                 book,
//                 quantity,
//                 key
//             });
//         }
        
//         attempts++;
//     }
    
//     return combinations;
// }

// (async () => {
//     try {
//         console.log("B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m∆∞·ª£n s√°ch ph√¢n b·ªë ƒë·ªÅu trong 2 tu·∫ßn...\n");

//         const staffId = "6877b60c14b0cc1b10278e45";
//         const targetSuccessCount = 150; // TƒÉng target l√™n 150
        
//         let successCount = 0;
//         let errorCount = 0;
//         let duplicateCount = 0;

//         // T·∫°o c√°c combinations unique tr∆∞·ªõc
//         console.log("ƒêang t·∫°o combinations unique...");
//         const combinations = generateUniqueCombinations(targetSuccessCount * 1.2); // T·∫°o th√™m 20% ƒë·ªÉ d·ª± ph√≤ng
//         console.log(`ƒê√£ t·∫°o ${combinations.length} combinations unique\n`);

//         // T·∫°o c√°c ng√†y m∆∞·ª£n ph√¢n b·ªë ƒë·ªÅu
//         console.log("ƒêang t·∫°o ph√¢n b·ªë ng√†y m∆∞·ª£n...");
//         const borrowDates = generateDistributedBorrowDates(targetSuccessCount);
//         console.log(`ƒê√£ t·∫°o ${borrowDates.length} ng√†y m∆∞·ª£n ph√¢n b·ªë ƒë·ªÅu\n`);

//         // Th·ª±c hi·ªán t·∫°o d·ªØ li·ªáu
//         for (let i = 0; i < Math.min(combinations.length, borrowDates.length); i++) {
//             try {
//                 const combo = combinations[i];
//                 const borrowDate = borrowDates[i];
                
//                 // Ki·ªÉm tra tr∆∞·ªõc khi t·∫°o ƒë·ªÉ tr√°nh duplicate
//                 const exists = await checkExistingCombination(combo.book.id, combo.reader.id);
//                 if (exists) {
//                     duplicateCount++;
//                     console.log(`B·ªè qua: ${combo.reader.username} ƒë√£ m∆∞·ª£n "${combo.book.title}" r·ªìi`);
//                     continue;
//                 }

//                 const result = await lendBook({
//                     MaSach: combo.book.id,
//                     MaDocGia: combo.reader.id,
//                     SoLuongMuon: combo.quantity,
//                     Msnv: staffId,
//                     NgayMuonCustom: borrowDate
//                 });

//                 if (result) {
//                     successCount++;
//                     const formattedDate = borrowDate.toLocaleDateString('vi-VN');
//                     const formattedTime = borrowDate.toLocaleTimeString('vi-VN', { 
//                         hour: '2-digit', 
//                         minute: '2-digit' 
//                     });
//                     console.log(`[${successCount}] ${combo.reader.username} m∆∞·ª£n ${combo.quantity} cu·ªën "${combo.book.title}" - ${formattedDate} ${formattedTime}`);
//                 }

//                 // Delay nh·ªè ƒë·ªÉ tr√°nh spam database
//                 if (i % 10 === 0) {
//                     await new Promise(resolve => setTimeout(resolve, 50));
//                 }

//             } catch (error) {
//                 if (error.message.includes('ƒëang m∆∞·ª£n s√°ch n√†y r·ªìi')) {
//                     duplicateCount++;
//                 } else {
//                     errorCount++;
//                     console.log(`L·ªói: ${error.message}`);
//                 }
//             }

//             // D·ª´ng khi ƒë·∫°t target
//             if (successCount >= targetSuccessCount) {
//                 console.log(`\nƒê√£ ƒë·∫°t target ${targetSuccessCount} l∆∞·ª£t m∆∞·ª£n, d·ª´ng l·∫°i.`);
//                 break;
//             }
//         }

//         // Th·ªëng k√™ k·∫øt qu·∫£
//         console.log(`\n${'='.repeat(50)}`);
//         console.log(`KET QUA TAO DU LIEU MUON SACH`);
//         console.log(`${'='.repeat(50)}`);
//         console.log(`Thanh cong: ${successCount} luot muon`);
//         console.log(`Trung lap: ${duplicateCount} luot`);
//         console.log(`Loi khac: ${errorCount} luot`);
//         console.log(`Tong cong: ${successCount + duplicateCount + errorCount} lan thu`);

//         // Th·ªëng k√™ chi ti·∫øt
//         const totalAttempts = successCount + duplicateCount + errorCount;
//         console.log(`\n${'='.repeat(50)}`);
//         console.log(`THONG KE CHI TIET`);
//         console.log(`${'='.repeat(50)}`);
//         console.log(`Ti le thanh cong: ${((successCount / totalAttempts) * 100).toFixed(1)}%`);
//         console.log(`Ti le trung lap: ${((duplicateCount / totalAttempts) * 100).toFixed(1)}%`);
//         console.log(`Trung binh moi sach: ~${(successCount / books.length).toFixed(1)} luot muon`);
//         console.log(`Trung binh moi doc gia: ~${(successCount / readers.length).toFixed(1)} luot muon`);

//         // ∆Ø·ªõc t√≠nh t·ªïng s·ªë s√°ch ƒë∆∞·ª£c m∆∞·ª£n
//         const estimatedTotalBooks = Math.round(successCount * 1.3);
//         console.log(`Tong sach duoc muon (uoc tinh): ~${estimatedTotalBooks} cuon`);
        
//         // Th√¥ng tin v·ªÅ ph√¢n b·ªë th·ªùi gian
//         console.log(`Du lieu duoc phan bo deu trong 14 ngay qua`);
//         console.log(`Gio muon: 8h00 - 17h00 (gio hanh chinh)`);

//     } catch (err) {
//         console.error("Loi chung khi chay script:", err.message);
//     }
// })();